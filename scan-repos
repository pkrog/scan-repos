#!/bin/bash
# vi: fdm=marker

# CONSTANTS {{{1
################################################################

VERSION=1.2.2

# State constants
((BRANCH_AHEAD          = 1 << 0))
((BRANCH_BEHIND         = 1 << 1))
((MODIFIED_FILES        = 1 << 2))
((BRANCH_PULLED         = 1 << 3))
((BRANCH_PUSHED         = 1 << 4))
((UNTRACKED_FILES       = 1 << 5))
((MODIFIED_SUBMODULES   = 1 << 6))
((BRANCH_DIVERGED       = 1 << 7))
((DELETED_FILES         = 1 << 8))
((DETACHED_HEAD         = 1 << 9))
((NOT_INITIALIZED       = 1 << 10)) # Submodule not initialized.
((INITIALIZED           = 1 << 11)) # Submodule has been initialized.
((BRANCH_UPTODATE       = 1 << 12))
((GIT_FAILURE           = 1 << 13))
((BRANCH_FETCHED        = 1 << 14))
((BRANCH_NOUPSTREAM     = 1 << 15))

# Others
ALL=all
YES=yes
Z_SHORTCUT=pFbuU

# GLOBAL VARIABLES {{{1
################################################################

DEBUG=0
FETCH=
PULL=
PUSH=
SUBMODULES=
PROGRESS=
DETACHED=
INIT=
TRACKING=
BRANCHNAME=
UPSTREAM=
SETUPSTREAM=

declare -a REPOS

# PRINT HELP {{{1
################################################################

function print_help {
	echo "Usage: scan-repos [options] [repositories]"
	echo
	echo "Repositories are either real repositories or folders containing repositories."
	echo "If no repositories are specified, then the value of the environment variable REPOSPATH is used if it is set. Otherwise the current directory is used."
	echo
	echo "Options:"
	echo "   -a, --push           Push repositories whose current branch is ahead."
	echo "   -A, --push-all       Push all branches of repositories."
	echo "   -b, --pull           Pull repositories whose current branch is behind, and that have no modified files."
	echo "   -d, --detached       Display repositories whose HEAD is detached."
	echo "   -f, --fetch          Fetch default remote of repositories."
	echo "   -F, --fetch-all      Fetch all remotes of repositories."
	echo "   -g, --debug          Debug mode."
	echo "   -h, --help           Print this help message."
	echo "   -i, --init           Initialize (and update) uninitialized submodules."
	echo "   -n, --branchname     Display current branch name."
	echo "   -p, --progress       Display progress bar."
	echo "   -s, --submodules     Check also the states of submodules."
	echo "   -t, --tracking       Detect branches that do not track a remote branch."
	echo "   -u, --upstream       Check if some branches have no upstream."
	echo "   -U, --set-upstream   Set upstream to origin/<branch> for each branch having none."
	echo "   -v, --version        Print version."
	echo "   -z                   Shortcut for -$Z_SHORTCUT."
}

# ERROR {{{1
################################################################

function error {

	local msg=$1

	echo "ERROR: $msg" >&2

	exit 1
}

# READ ARGS {{{1
################################################################

function read_args {

	local args="$*" # save arguments for debugging purpose
	
	# Read options
	while true ; do
		case $1 in
			-a|--push)          PUSH=$YES ;;
			-A|--push-all)      PUSH=$ALL ;;
			-b|--pull)          PULL=$YES ;;
			-d|--detached)      DETACHED=$YES ;;
			-f|--fetch)         FETCH=$YES ;;
			-F|--fetch-all)     FETCH=$ALL ;;
			-g|--debug)         DEBUG=$((DEBUG + 1)) ;;
			-h|--help)          print_help ; exit 0 ;;
			-i|--init)          INIT=$YES ;;
			-n|--branchname)    BRANCHNAME=$YES ;;
			-p|--progress)      PROGRESS=$YES ;;
			-s|--submodules)    SUBMODULES=$YES ;;
			-t|--tracking)      TRACKING=$YES ;;
			-u|--upstream)      UPSTREAM=$YES ;;
			-U|--set-upstream)  SETUPSTREAM=$YES ;;
			-v|--version)       echo $VERSION ; exit 0 ;;
			-z)                 set -- $1 -$Z_SHORTCUT "${@:2}" ;;
			-) error "Illegal option $1." ;;
			--) error "Illegal option $1." ;;
			--*) error "Illegal option $1." ;;
			-?) error "Unknown option $1." ;;
			-[^-]*) split_opt=$(echo $1 | sed 's/^-//' | sed 's/\([a-zA-Z]\)/ -\1/g') ; set -- $1$split_opt "${@:2}" ;;
			*) break
		esac
		shift
	done

	# Read remaining arguments as a list of repositories
	if [ -n "$*" ] ; then
		REPOS=("$@") # Replace any value of REPOSPATH with current specified list of repositories

	# Use value of REPOSPATH environment variable
	elif [ -n "$REPOSPATH" ] ; then
		oldifs=$IFS
		IFS=:
		for path in $REPOSPATH ; do
			REPOS+=("$path")
		done
		IFS=$oldifs

	# Use current directory
	else
		REPOS=(".")
	fi

	# Debug
	print_debug_msg 1 "Arguments are : $args"
	print_debug_msg 1 "Repositories are : $REPOS"
	[ -n "$FETCH" ] && print_debug_msg 1 "Fetch enabled with value \"$FETCH\"."
	[ -n "$PULL" ] && print_debug_msg 1 "Pull enabled."
	[ -n "$PUSH" ] && print_debug_msg 1 "Push enabled with value \"$PUSH\"."
	[ -n "$DETACHED" ] && print_debug_msg 1 "Detached detection enabled."
	[ -n "$PROGRESS" ] && print_debug_msg 1 "Progress bar enabled."
	[ -n "$SUBMODULES" ] && print_debug_msg 1 "Submodules scanning enabled."
}

# PRINT DEBUG MSG {{{1
################################################################

function print_debug_msg {

	local dbglvl=$1
	local dbgmsg=$2

	[ $DEBUG -ge $dbglvl ] && echo "[DEBUG] $dbgmsg" >&2
}

# PRINT WARNING MSG {{{1
################################################################

function print_warning_msg {

	local warnmsg=$1

	erase_progress_bar
	echo $'\e[31m''[WARNING]'" $warnmsg"$'\e[0m' >&2
}

# PRINT MSG {{{1
################################################################

function print_msg {

	local message=$1
	
	erase_progress_bar
	echo $message
}

# ERASE PROGRESS BAR {{{1
################################################################

function erase_progress_bar {
	if [ -n "$PROGRESS" ] ; then
		echo -n $'\r'"                                                            "$'\r' >&2
	fi
}

# PRINT PROGRESS BAR {{{1
################################################################

function print_progress_bar {

	local title=$1
	local done=$2
	local total=$3
	local keepbar=$4
	local barsize=32
	local filledsize=$((done*barsize/total))
	local percent=$((done*100/total))

	if [ -n "$PROGRESS" ] ; then
		# Build bar
		local bar=
		local i=
		for((i=0;i<barsize;++i)) ; do
			if [ $i -lt $filledsize ] ; then
				bar="$bar#"
			else
				bar="$bar "
			fi
		done

		echo -n $'\r' >&2
		if [ -n "$title" ] ; then
			echo -n "$title " >&2
		fi
		echo -n "[$bar] ($percent%)" >&2
		if [ $done -ge $total ] ; then
			if [ -n "$keepbar" ] ; then
				echo >&2
			else
				erase_progress_bar
			fi
		else
			echo -n $'\r' >&2
		fi
	fi
}

# RESOLVE REPOS PATHS {{{1
################################################################

function resolve_repos_paths {

	local -a tmprepos

	# Loop on all defined paths
	for path in "${REPOS[@]}" ; do

		# Get repositories
		if [ -e "$path/.git" ] ; then
			tmprepos+=("$path")
		else
			local list_repos_file=$(mktemp -t listrepos.XXXXXX)
			ls -1d "$path"/*/.git 2>/dev/null | sed 's/\/\.git$//g' > $list_repos_file
			while read rep ; do
				tmprepos+=("$rep")
			done < $list_repos_file
			rm $list_repos_file
		fi
	done

	REPOS=("${tmprepos[@]}")
}

# GET STATUS FILE {{{1
################################################################

function get_status_file {

	local repospath="$1"
	local repos_status_file=$(mktemp -t "scanrepos.status.XXXXXX")
	local prevdir=$(pwd)

	# Enter repository's directory
	cd "$repospath"

	# Get status
	print_debug_msg 1 "Getting repository \"$repospath\" status..."
	if [ ! -e .git ] ; then
		echo NOT INITIALIZED >$repos_status_file
		print_debug_msg 1 "Repository not initialized."
	elif ! git status >$repos_status_file ; then
		echo GIT FAILURE >$repos_status_file
		print_warning_msg "Failure on getting status of repository $repospath."
	fi

	# Go back to previous directory
	cd $prevdir

	# Return status filename
	print_debug_msg 1 "Repository \"$repospath\" status file is \"$repos_status_file\"."
	echo $repos_status_file
}

# Get branch info file {{{1
################################################################

function get_branch_info_file {

	local repospath="$1"
	local repos_branch_info_file=$(mktemp -t "scanrepos.branch_info.XXXXXX")
	local prevdir=$(pwd)

	# Enter repository's directory
	cd "$repospath"

	# Get branch info
	print_debug_msg 1 "Getting repository \"$repospath\" branch info..."
	if ! git branch -vv >$repos_branch_info_file ; then
		echo GIT FAILURE >$repos_branch_info_file
		print_warning_msg "Failure on getting branch info of repository $repospath."
	fi

	# Go back to previous directory
	cd $prevdir

	# Return branch_info filename
	print_debug_msg 1 "Repository \"$repospath\" branch info file is \"$repos_branch_info_file\"."
	echo $repos_branch_info_file
}

# SCAN STATUS {{{1
################################################################

function scan_status {

	local repos_status_file="$1"
	local status="$2"

	print_debug_msg 1 "Scanning repository status..."

	grep -q '^NOT INITIALIZED$'             "$repos_status_file" && ((status = status | NOT_INITIALIZED))
	grep -q '^GIT FAILURE$'                 "$repos_status_file" && ((status = status | GIT_FAILURE))
	grep -q '^Your branch is up-to-date'    "$repos_status_file" && ((status = status | BRANCH_UPTODATE))
	grep -q '^HEAD detached'                "$repos_status_file" && ((status = status | DETACHED_HEAD))
	grep -q '^Untracked files:'             "$repos_status_file" && ((status = status | UNTRACKED_FILES))
	grep -q 'modified: .* (.*)*$'           "$repos_status_file" && ((status = status | MODIFIED_SUBMODULES))
	grep -q 'deleted:[^(]*$'                "$repos_status_file" && ((status = status | DELETED_FILES))
	egrep -q 'modified:[^(]*$'              "$repos_status_file" && ((status = status | MODIFIED_FILES))
	grep -q 'branch is behind'              "$repos_status_file" && ((status = status | BRANCH_BEHIND))
	grep -q 'branch is ahead'               "$repos_status_file" && ((status = status | BRANCH_AHEAD))
	grep -q 'branch and .* have diverged'   "$repos_status_file" && ((status = status | BRANCH_DIVERGED))

	# Return status
	print_debug_msg 1 "Status = $status."
	echo "$status"
}

# Scan branch info {{{1
################################################################

function scan_branch_info {

	local repos_branch_info_file="$1"
	local status="$2"

	print_debug_msg 1 "Scanning repository branch info..."

	noupstream=$(grep -v '(HEAD' "$repos_branch_info_file" | grep -v '\[')
	[ -n "$noupstream" ] && ((status = status | BRANCH_NOUPSTREAM))

	# Return status
	print_debug_msg 1 "Status = $status."
	echo "$status"
}

# Get branches without upstream {{{1
################################################################

function get_branches_without_upstream {

	local repos_branch_info_file="$1"
	local branches=

	grep -v '(HEAD' "$repos_branch_info_file" | grep -v '\[' | sed -e 's/^[ *]*\([^ ]*\).*$/\1/'

	# Return branches
	print_debug_msg 1 "Branches without upstream = $branches."
	echo "$branches"
}

# Set upstream {{{1
################################################################

function set_upstream {

	local repospath="$1"
	local branches_without_upstream="$2"
	local prevdir=$(pwd)

	# Enter repository's directory
	cd "$repospath"

	# Loop on all branches that have no upstream set
	local branches_failure=
	for branch in $branches_without_upstream ; do
		if ! git branch --set-upstream-to=origin/$branch $branch >/dev/null ; then
			branches_failure="$branches_failure $branch"
		fi
	done

	# Go back to previous directory
	cd $prevdir

	echo "$branches_failure"
}

# GET BRANCH NAME {{{1
################################################################

function get_branch_name {

	local repos_status_file="$1"
	local branchname=""

	print_debug_msg 1 "Getting repository current branch name..."

	# Search for branchname inside status file
	branchname=$(sed -ne '1s/^On branch \(.*\)$/\1/p' "$repos_status_file")

	# Return branch name
	print_debug_msg 1 "Branch name is \"$branchname\"."
	echo "$branchname"
}

# FETCH {{{1
################################################################

function fetch_repos {

	local repospath="$1"
	local status="$2"
	local fetch_output_file="$3"
	local prevdir=$(pwd)
	local args=
	[ $DEBUG -eq 0 -a -z "$fetch_output_file" ] && args=--quiet
	[ "$FETCH" = "$ALL" ] && args="$args --all"

	cd $repospath
	print_debug_msg 1 "Fetching $repospath ..."

	if ! git fetch $args >$fetch_output_file 2>&1 ; then
		print_warning_msg "Failure on fetching repository $repospath."
	else
		((status = status | BRANCH_FETCHED))
	fi

	cd $prevdir

	echo "$status"
}

# GET FETCHED REMOTES {{{1
################################################################

function get_fetched_remotes {

	local fetch_output_file="$1"
	local fetched_remotes=""

	print_debug_msg 1 "Getting fetched remotes..."

	# Search for remotes inside fetch output
	fetched_remotes=$(grep '.*->.*' "$fetch_output_file" | sed -e 's!^.* \([^ ]*\)$!\1!')

	# Return fetched remotes
	print_debug_msg 1 "Fetched remotes are \"$fetched_remotes\"."
	echo "$fetched_remotes"
}

# PULL REPOS {{{1
################################################################

function pull_repos {

	local repospath="$1"
	local status="$2"
	local prevdir=$(pwd)

	cd "$repospath"
	print_debug_msg 1 "Pulling $repospath ..."

	if [ $((status & (BRANCH_BEHIND | BRANCH_DIVERGED) )) -ne 0 -a $((status & (MODIFIED_FILES | DELETED_FILES))) -eq 0 ] ; then

		# Pull
		if ! git pull 2>&1 >/dev/null ; then
			print_warning_msg "Failure on pulling repository $repospath."
		else
			if [ $((status & BRANCH_DIVERGED)) -ne 0 ] ; then
				((status = status | BRANCH_AHEAD))
			fi
			((status = status ^ (status & (BRANCH_BEHIND | BRANCH_DIVERGED) ) ))
			((status = status | BRANCH_PULLED))
		fi
	fi

	cd $prevdir

	echo "$status"
}

# INITIALIZE SUBMODULE {{{1
################################################################

function init_submodule {

	local repospath="$1"
	local status="$2"
	local prevdir=$(pwd)

	cd "$repospath"
	print_debug_msg 1 "Initializing $repospath ..."

	if [ $((status & NOT_INITIALIZED)) -ne 0 ] ; then
		if ! git submodule update --init --recursive . >/dev/null 2>&1 ; then
			print_warning_msg "Failure on updating submodules of repository $repospath."
		else
			((status = status ^ (status & NOT_INITIALIZED) ))
			((status = status | INITIALIZED))
		fi
	fi

	cd $prevdir

	echo "$status"
}

# PUSH REPOS {{{1
################################################################

function push_repos {

	local repospath="$1"
	local status="$2"
	local prevdir=$(pwd)
	local args=
	[ "$PUSH" = "$ALL" ] && args=--all

	cd "$repospath"
	print_debug_msg 1 "Pushing (PUSH=$PUSH) $repospath ..."

	if [ "$PUSH" = "$ALL" -o $((status & BRANCH_AHEAD)) -ne 0 ] ; then
		if ! git push $args >/dev/null 2>&1 ; then
			print_warning_msg "Failure on pushing repository $repospath."
		else
			((status = status ^ (status & BRANCH_AHEAD) ))
			((status = status | BRANCH_PUSHED))
		fi
	fi

	cd $prevdir

	echo "$status"
}

# PRINT STATUS {{{1
################################################################

function print_status {

	local repospath="$1"
	local branch="$2"
	local status="$3"
	local fetched_remotes="$4"
	local branches_without_upstream="$5"

	local msg=

	print_debug_msg 1 "Printing status $status of $repospath ..."

	# Pre-actions
	if [ -n "$fetched_remotes" ] ; then
		spaces=$(echo $fetched_remotes | sed -e 's/ //g')
		nb_remotes=$(expr ${#spaces} + 1)
		[ $((status & BRANCH_FETCHED)) -ne 0 -a $nb_remotes -eq 1 ] && msg="$msg, "$'\e[1;32m'"remote $fetched_remotes has been fetched"$'\e[0m'
		[ $((status & BRANCH_FETCHED)) -ne 0 -a $nb_remotes -gt 1 ] && msg="$msg, "$'\e[1;32m'"remotes $fetched_remotes have been fetched"$'\e[0m'
	fi

	# Branches without uptsream (i.e.: "no tracking information")
	if [ -n "$branches_without_upstream" ] ; then
		spaces=$(echo $branches_without_upstream | sed -e 's/ //g')
		nb_branches=$(expr ${#spaces} + 1)
		[ $((status & BRANCH_NOUPSTREAM)) -ne 0 -a $nb_branches -eq 1 ] && msg="$msg, "$'\e[1;31m'"branche $branches_without_upstream has no upstream"$'\e[0m'
		[ $((status & BRANCH_NOUPSTREAM)) -ne 0 -a $nb_branches -gt 1 ] && msg="$msg, "$'\e[1;31m'"branches $branches_without_upstream have no upstreams"$'\e[0m'
	fi
	
	# State
	[ $((status & BRANCH_DIVERGED)) -ne 0 ]                 && msg="$msg, "$'\e[36m''branch has diverged'$'\e[0m'
	[ $((status & BRANCH_BEHIND)) -ne 0 ]                   && msg="$msg, "$'\e[32m''branch is behind'$'\e[0m'
	[ $((status & BRANCH_AHEAD)) -ne 0 ]                    && msg="$msg, "$'\e[34m''branch is ahead'$'\e[0m'
	[ $((status & UNTRACKED_FILES)) -ne 0 ]                 && msg="$msg, "$'\e[33m''untracked files'$'\e[0m'
	[ $((status & MODIFIED_FILES)) -ne 0 ]                  && msg="$msg, "$'\e[31m''modified files'$'\e[0m'
	[ $((status & DELETED_FILES)) -ne 0 ]                   && msg="$msg, "$'\e[31m''deleted files'$'\e[0m'
	[ $((status & MODIFIED_SUBMODULES)) -ne 0 ]             && msg="$msg, "$'\e[35m''modified submodules'$'\e[0m'
	[ $((status & GIT_FAILURE)) -ne 0 ]                     && msg="$msg, "$'\e[35m''git failure'$'\e[0m'
	[ $((status & NOT_INITIALIZED)) -ne 0 ]                 && msg="$msg, "$'\e[35m''not initialized'$'\e[0m'
	[ $((status & INITIALIZED)) -ne 0 ]                     && msg="$msg, "$'\e[35m''initialized'$'\e[0m'
	[ -n "$DETACHED" -a $((status & DETACHED_HEAD)) -ne 0 ] && msg="$msg, "$'\e[31m''detached head'$'\e[0m'
	[ -n "$TRACKING" -a $((status & (NOT_INITIALIZED | DETACHED_HEAD | BRANCH_BEHIND | BRANCH_AHEAD | BRANCH_UPTODATE))) -eq 0 ] && msg="$msg, "$'\e[31m''no tracking'$'\e[0m'

	# Post-actions
	[ $((status & BRANCH_PULLED)) -ne 0 ]                       && msg="$msg, "$'\e[1;32m'"branch $branch has been pulled"$'\e[0m'
		# TODO Branch has been pulled from which remote ?
	[ $((status & BRANCH_PUSHED)) -ne 0 -a "$PUSH" != "$ALL" ]  && msg="$msg, "$'\e[1;34m'"branch $branch has been pushed"$'\e[0m'
	[ $((status & BRANCH_PUSHED)) -ne 0 -a "$PUSH" = "$ALL" ]   && msg="$msg, "$'\e[1;34m'"all branches have been pushed"$'\e[0m'

	# Display message
	if [ -n "$msg" ] ; then
		msg=${msg#, } # Remove first comma
		header=$repospath
		[ -n "$BRANCHNAME" -a -n "$branch" ] && header="$header($branch)"
		print_msg "$header: ${msg}."
	fi
}

# SCAN ALL {{{1
################################################################

function scan_all {

	local -i i=1
	for rep in "${REPOS[@]}" ; do
		print_progress_bar "Scanning" $i ${#REPOS[@]}

		local status=0

		# Check if default repos is reachable
		# TODO
		# NOTE But what if FETCH_ALL is on?

		# Fetch
		if [ -n "$FETCH" ] ; then
			fetch_output_file=$(mktemp -t "scanrepos.fetch.XXXXXX") # TODO delete fetch_output_file?
			status=$(fetch_repos "$rep" "$status" "$fetch_output_file")
			fetched_remotes=$(get_fetched_remotes "$fetch_output_file")
		fi

		# Scan
		status_file=$(get_status_file "$rep")
		status=$(scan_status "$status_file" "$status")
		branch=$(get_branch_name "$status_file")
		# TODO delete status_file?

		# Initialize submodule
		[ -n "$INIT" -a -n "$SUBMODULES" ] && status=$(init_submodule "$rep" "$status")

		# Check upstreams
		if [ -n "$UPSTREAM" -o -n "$SETUPSTREAM" ] ; then
			branch_info_file=$(get_branch_info_file "$rep")
			status=$(scan_branch_info "$branch_info_file" "$status")
			branches_without_upstream=$(get_branches_without_upstream "$branch_info_file")
			rm -f $branch_info_file
		fi

		# Set upstream
		if [ -n "$SETUPSTREAM" -a $((status & BRANCH_NOUPSTREAM)) -ne 0 ] ; then
			branches_without_upstream=$(set_upstream "$rep" "$branches_without_upstream")
			[ -z "$branches_without_upstream" ] && ((status = status ^ (status & BRANCH_NOUPSTREAM) ))
		fi

		# Pull
		[ -n "$PULL" ] && status=$(pull_repos "$rep" "$status")

		# Push
		[ -n "$PUSH" ] && status=$(push_repos "$rep" "$status")

		print_status "$rep" "$branch" "$status" "$fetched_remotes" "$branches_without_upstream"

		i+=1
	done
}

# LIST SUBMODULES {{{1
################################################################

function list_submodules {

	local origdir=$(pwd)
	local -a tmprepos

	# Loop on all defined paths
	for rep in "${REPOS[@]}" ; do

		tmprepos+=("$rep")
		cd "$rep"
		local list_submodules_file=$(mktemp -t listrepos.XXXXXX)
		git submodule status --recursive | sed 's/^.[0-9a-f]* //' | sed 's/ \(.*\)$//' > $list_submodules_file
		cd "$origdir"
		while read subrep ; do
			tmprepos+=("$rep/$subrep")
		done < $list_submodules_file
		rm $list_submodules_file
	done

	REPOS=("${tmprepos[@]}")
}

# MAIN {{{1
################################################################

read_args "$@"

# List all repositories
resolve_repos_paths

# List submodules
[ -n "$SUBMODULES" ] && list_submodules

# Scan
scan_all
